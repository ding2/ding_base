<?php
/**
 * @file
 * Base setup and functions for Ding!.
 */

/**
 * Implements hook_menu().
 *
 * Provides the Configuration page block for all Ding modules.
 */
function ding_base_menu() {
  $items['admin/config/ding'] = array(
    'title' => 'Ding',
    'description' => 'Manage Ding.',
    'position' => 'right',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_base_theme() {
  return array(
    'tableselect_form' => array(
      'render element' => 'element',
    ),
    'body_snippet' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements s a theme function for body_snippet.
 */
function theme_body_snippet($element) {
  $element_string = strip_tags($element['element']['value']);
  $element_string = preg_replace('/\[\[.*\]\]/', '', $element_string);
  $element_string = html_entity_decode($element_string, ENT_NOQUOTES, 'utf-8');
  $element_string = drupal_substr($element_string, 0, $element['display']['settings']['body_snippet_length']);
  return $element_string;
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_base_field_formatter_info() {
  return array(
    'body_snippet' => array(
      'label' => t('Show plaintext part of string'),
      'field types' => array('text', 'text_long'),
      'settings' => array('body_snippet_length' => 100),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('body_snippet', array('element' => $item, 'field' => $instance, 'display' => $display)),
    );
  }
  return $elements;
}

function ding_base_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  if ($display['type'] == 'body_snippet') {
    $element['body_snippet_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['body_snippet_length'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }
  return $element;
}

function ding_base_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'body_snippet') {
    $summary = t('Trim length') . ': ' . $settings['body_snippet_length'];
  }

  return $summary;
}
/**
 * Implements hook_date_format_types().
 */
function ding_base_date_format_types() {
  return array(
    'date_only' => t('Date only'),
  );
}

/**
* Implements hook_date_formats().
* Provides specific extra formats used by Ding! modules and assigning them to specific date types
*/
function ding_base_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'medium',
    'format'  => 'l j. F', 
    'locales' => array(),
  );

  $formats[] = array(
    'type'    => 'long',
    'format'  => 'l j. F Y', 
    'locales' => array(),
  );
  
  $formats[] = array(
    'type'    => 'short',
    'format'  => 'G:i', 
    'locales' => array(),
  );

  // save certain date formats into variables
  foreach ($formats as $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }
  variable_set('date_format_long_date_only', 'l j. F Y');
  variable_set('date_format_date_only', 'l j. F');
  variable_set('date_format_time_only', 'G:i');

  return $formats;
}

/**
 * Implements hook_element_info().
 */
function ding_base_element_info() {
  $types['tableselect_form'] = array(
    '#input' => TRUE,
    '#js_select' => TRUE,
    '#multiple' => TRUE,
    '#process' => array('ding_base_element_process_tableselect_form'),
    '#options' => array(),
    '#empty' => '',
    '#theme' => 'tableselect_form',
  );

  return $types;
}

/**
 * Process function for our element.
 */
function ding_base_element_process_tableselect_form($element) {
  if ($element['#multiple']) {
    $value = is_array($element['#value']) ? $element['#value'] : array();
  }
  else {
    // Advanced selection behaviour make no sense for radios.
    $element['#js_select'] = FALSE;
  }

  $element['#tree'] = TRUE;

  if (count($element['#options']) > 0) {
    if (!isset($element['#default_value']) || $element['#default_value'] === 0) {
      $element['#default_value'] = array();
    }

    // Create a checkbox or radio for each item in #options in such a way that
    // the value of the tableselect element behaves as if it had been of type
    // checkboxes or radios.
    foreach ($element['#options'] as $key => $choice) {
      // Do not overwrite manually created children.
      if (!isset($element[$key])) {
        if ($element['#multiple']) {
          $title = '';
          if (!empty($element['#options'][$key]['title']['data']['#title'])) {
            $title = t('Update @title', array(
                       '@title' => $element['#options'][$key]['title']['data']['#title'],
                     ));
          }
          $element[$key] = array(
            '#type' => 'checkbox',
            '#title' => $title,
            '#title_display' => 'invisible',
            '#return_value' => $key,
            '#default_value' => isset($value[$key]) ? $key : NULL,
            '#attributes' => $element['#attributes'],
          );
        }
        else {
          // Generate the parents as the autogenerator does, so we will have a
          // unique id for each radio button.
          $parents_for_id = array_merge($element['#parents'], array($key));
          $element[$key] = array(
            '#type' => 'radio',
            '#title' => '',
            '#return_value' => $key,
            '#default_value' => ($element['#default_value'] == $key) ? $key : NULL,
            '#attributes' => $element['#attributes'],
            '#parents' => $element['#parents'],
            '#id' => drupal_html_id('edit-' . implode('-', $parents_for_id)),
            '#ajax' => isset($element['#ajax']) ? $element['#ajax'] : NULL,
          );
        }
        if (isset($element['#options'][$key]['#weight'])) {
          $element[$key]['#weight'] = $element['#options'][$key]['#weight'];
        }

        // Add a reference to cell content in a hidden child of this
        // element. This means that form API will see them, and do the
        // appropriate processing.
        foreach ($element['#header'] as $fieldname => $title) {
          if (isset($element['#options'][$key][$fieldname]['data']) && is_array($element['#options'][$key][$fieldname]['data'])) {
            $element['_form_options'][$key][$fieldname] =& $element['#options'][$key][$fieldname]['data'];
          }
          elseif (!isset($element['#options'][$key][$fieldname]['data']) && is_array($element['#options'][$key][$fieldname])) {
            $element['_form_options'][$key][$fieldname] =& $element['#options'][$key][$fieldname];
          }
        }
      }
    }
  }
  else {
    $element['#value'] = array();
  }
  return $element;
}

/**
 * Theme function for our custom element.
 */
function theme_tableselect_form($variables) {
  $element = $variables['element'];
  $rows = array();
  $header = array();
  if (!empty($element['#options'])) {
    // Generate a table row for each selectable item in #options.
    foreach (element_children($element) as $key) {
      if ($key == '_form_options') {
        // Skip our hidden render sub-array.
        continue;
      }
      $row = array();

      $row['data'] = array();
      if (isset($element['#options'][$key]['#attributes'])) {
        $row += $element['#options'][$key]['#attributes'];
      }
      // Render the checkbox / radio element.
      $row['data'][] = drupal_render($element[$key]);

      // As theme_table only maps header and row columns by order, create the
      // correct order by iterating over the header fields.
      foreach ($element['#header'] as $fieldname => $title) {
        $row['data'][] = $element['#options'][$key][$fieldname];
        
        // Add classes to table header columns.
        $translated_title = $element['#header'][$fieldname];
        $header[$fieldname] = array('data' => $translated_title, 'class' => $fieldname);
      }
      $rows[] = $row;
    }
    // Add an empty header or a "Select all" checkbox to provide room for the
    // checkboxes/radios in the first table column.
    if ($element['#js_select']) {
      // Add a "Select all" checkbox.
      drupal_add_js('misc/tableselect.js');
      array_unshift($header, array('class' => array('select-all')));
    }
    else {
      // Add an empty header when radio buttons are displayed or a "Select all"
      // checkbox is not desired.
      array_unshift($header, '');
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => $element['#empty'], 'attributes' => $element['#attributes']));
}
